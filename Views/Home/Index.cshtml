@{
    Layout = "~/Views/Shared/_Layout.cshtml"; // Optional if you use a shared layout
}

<link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
<script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
<script src="https://unpkg.com/leaflet-routing-machine/dist/leaflet-routing-machine.js"></script>

<style>
    /* Shrink the routing instructions container */
    .leaflet-routing-container {
        font-size: 12px; /* Smaller font size */
        background-color: rgba(255, 255, 255, 0.8); /* Transparent background */
        width: 200px; /* Adjust width */
        padding: 5px;
        position: absolute;
        top: 10px; /* Place at the top */
        right: 10px; /* Place at the right */
        z-index: 1000;
        border-radius: 5px;
        box-shadow: 0 0 5px rgba(0, 0, 0, 0.5); /* Add subtle shadow */
    }

        /* Hide unnecessary elements inside the routing container */
        .leaflet-routing-container .leaflet-routing-instructions {
            display: none; /* Hide detailed instructions */
        }

        /* Optional: Hide alternative routes */
        .leaflet-routing-container .leaflet-routing-alt {
            display: none;
        }

    /* Style for alert messages */
    #message-container {
        margin-bottom: 10px;
    }
</style>

<!-- Alert Messages Section -->
@if (TempData["LoginMessage"] != null)
{
<div class="alert alert-success alert-dismissible fade show" role="alert">
    @TempData["LoginMessage"]
    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
</div>
}

<br />
<br />

<!-- Header Section -->
<header class="bg-primary text-white text-center py-5 rounded-3">
    <div class="container">
        <h1>Welcome to the Cab Booking System</h1>
        <p>Book your cab with ease and comfort!</p>
    </div>
</header>

<!-- Booking Form Section -->
<section id="booking-form" class="py-5">
    <div class="container">
        <h2 class="text-center mb-4">Book a Cab Now!</h2>

        <div id="message-container" class="text-center"></div> <!-- For error/success messages -->

        <form action="/Home/Search" method="post" onsubmit="return validateForm()">
            <div class="row">
                <div class="col-md-6">
                    <div class="form-group">
                        <label for="pickup">Pickup Location:</label>
                        <input type="text" id="pickup" name="PickupLocation" class="form-control" placeholder="Click on the map to select pickup location" readonly required />
                    </div>
                    <br />
                    <div class="form-group">
                        <label for="drop">Drop Location:</label>
                        <input type="text" id="drop" name="DropLocation" class="form-control" placeholder="Click on the map to select drop location" readonly required />
                    </div>
                    <br />
                    <!-- Hidden fields for pickup and drop lat/lng -->
                    <input type="hidden" id="pickupLat" name="PickupLat" />
                    <input type="hidden" id="pickupLng" name="PickupLng" />
                    <input type="hidden" id="dropLat" name="DropLat" />
                    <input type="hidden" id="dropLng" name="DropLng" />
                    <!-- Swap Button -->
                    <div class="form-group">
                        <button type="button" class="btn btn-secondary" id="swap-btn" onclick="swapLocations()">Swap Locations</button>
                    </div>
                    <br />
                    <div class="form-group">
                        <label for="persons">Total Persons:</label>
                        <input type="number" id="persons" name="TotalPersons" class="form-control" placeholder="Enter the total number of persons" required />
                    </div>
                    <br />
                    <div class="form-group">
                        <label for="distance">Distance (km):</label>
                        <input type="number" id="distance" name="Distance" class="form-control" placeholder="Distance will be calculated" readonly />
                    </div>
                    <br />
                    <div class="form-group">
                        <label for="time">Booking Time:</label>
                        <input type="datetime-local" id="time" name="BookingTime" class="form-control" required />
                    </div>
                </div>
                <div class="col-md-6">
                    <center><label for="map">Select Locations on Map:</label></center>
                    <div id="map" style="height: 400px;"></div>
                </div>
            </div>

            <div class="text-center mt-4">
                <button type="submit" class="btn btn-primary" onclick="checkBro()">Search Cabs</button>
            </div>
        </form>
    </div>
</section>

<!-- Features Section -->
<section id="features" class="py-5 bg-light">
    <div class="container">
        <h2 class="text-center">Why Choose Us?</h2>
        <div class="row text-center mt-4">
            <div class="col-md-4">
                <h4>Reliable and Trusted Drivers</h4>
                <p>Our drivers are experienced and verified.</p>
            </div>
            <div class="col-md-4">
                <h4>Wide Range of Cabs</h4>
                <p>We provide a wide variety of cabs to suit your needs.</p>
            </div>
            <div class="col-md-4">
                <h4>Affordable Pricing</h4>
                <p>Get the best rates for all your rides.</p>
            </div>
        </div>
    </div>
</section>

<!-- Footer Section -->
<footer class="py-4 bg-dark text-white text-center">
    <div class="container">
        <p>&copy; 2024 Cab Booking System. All rights reserved.</p>
    </div>
</footer>

<script>


    function validateForm() {
        var pickupLat = document.getElementById('pickupLat').value;
        var pickupLng = document.getElementById('pickupLng').value;
        var dropLat = document.getElementById('dropLat').value;
        var dropLng = document.getElementById('dropLng').value;

        if (!pickupLat || !pickupLng || !dropLat || !dropLng) {
            displayMessage('Please select both pickup and drop locations on the map!', 'danger');
            return false;  // Prevent form submission
        }
        return true;  // Proceed with form submission
    }

    function checkBro() {
        // After setting the values in hidden fields, add this
        console.log("Pickup Lat: ", document.getElementById('pickupLat').value);
        console.log("Pickup Lng: ", document.getElementById('pickupLng').value);
        console.log("Drop Lat: ", document.getElementById('dropLat').value);
        console.log("Drop Lng: ", document.getElementById('dropLng').value);

    }

    // Initialize the map over India
    var map = L.map('map').setView([20.5937, 78.9629], 5);

    // Add OpenStreetMap tile layer
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: 'Map data © OpenStreetMap contributors'
    }).addTo(map);

    var pickupMarker, dropMarker, route;
    var settingPickup = false; // Initial state

    // Display messages (alerts)
    function displayMessage(message, messageType = 'warning') {
        var messageContainer = document.getElementById('message-container');
        var messageDiv = document.createElement('div');
        messageDiv.className = `alert alert-${messageType} alert-dismissible fade show`;
        messageDiv.role = 'alert';
        messageDiv.innerHTML = `${message} <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>`;
        messageContainer.appendChild(messageDiv);

        setTimeout(function () {
            if (messageDiv) {
                messageDiv.classList.remove('show');
                setTimeout(() => {
                    messageDiv.remove();
                }, 500);
            }
        }, 2000);
    }

    // Remove a marker from the map
    function removeMarker(marker) {
        if (marker) {
            map.removeLayer(marker);
        }
    }

    // Reset map and clear fields
    function resetMapToDefault() {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(function (position) {
                var lat = position.coords.latitude;
                var lng = position.coords.longitude;
                map.setView([lat, lng], 13);

                removeMarker(pickupMarker);
                pickupMarker = L.marker([lat, lng]).addTo(map)
                    .bindPopup('Pickup location set here!')
                    .openPopup();

                getAreaName(lat, lng, function (areaName) {
                    document.getElementById('pickup').value = areaName;
                    document.getElementById('pickupLat').value = lat;
                    document.getElementById('pickupLng').value = lng;
                });

                removeMarker(dropMarker);
                document.getElementById('drop').value = '';
                if (route) map.removeControl(route);
                document.getElementById('distance').value = '';
            });
        } else {
            displayMessage('Geolocation is not supported by this browser.', 'danger');
        }
    }

    // Validate location in India
    function validateLocationInIndia(lat, lng, callback) {
        var url = `https://nominatim.openstreetmap.org/reverse?format=jsonv2&lat=${lat}&lon=${lng}`;
        fetch(url)
            .then(response => response.json())
            .then(data => {
                var isInIndia = data && data.address && data.address.country === 'India';
                if (!isInIndia) {
                    displayMessage('Selected location must be within India!', 'danger');
                }
                callback(isInIndia);
            });
    }

    // Calculate distance between two coordinates
    function calculateDistance(lat1, lng1, lat2, lng2) {
        var R = 6371; // Radius of the earth in km
        var dLat = (lat2 - lat1) * Math.PI / 180;
        var dLng = (lng2 - lng1) * Math.PI / 180;
        var a =
            0.5 - Math.cos(dLat) / 2 +
            Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *
            (1 - Math.cos(dLng)) / 2;
        return R * 2 * Math.asin(Math.sqrt(a)); // Distance in km
    }

    // Reverse geocoding to get location name
    function getAreaName(lat, lng, callback) {
        var url = `https://nominatim.openstreetmap.org/reverse?format=jsonv2&lat=${lat}&lon=${lng}`;
        fetch(url)
            .then(response => response.json())
            .then(data => {
                if (data && data.display_name) {
                    callback(data.display_name);
                } else {
                    callback('');
                }
            });
    }

    // Handle map clicks to select pickup or drop locations
    map.on('click', function (e) {
        var lat = e.latlng.lat;
        var lng = e.latlng.lng;

        validateLocationInIndia(lat, lng, function (isInIndia) {
            if (!isInIndia) return;

            if (settingPickup) {
                removeMarker(pickupMarker);
                pickupMarker = L.marker([lat, lng]).addTo(map)
                    .bindPopup('Pickup location set here!')
                    .openPopup();

                getAreaName(lat, lng, function (areaName) {
                    document.getElementById('pickup').value = areaName;
                    document.getElementById('pickupLat').value = lat;
                    document.getElementById('pickupLng').value = lng;
                });
            } else {
                removeMarker(dropMarker);
                dropMarker = L.marker([lat, lng]).addTo(map)
                    .bindPopup('Drop location set here!')
                    .openPopup();

                getAreaName(lat, lng, function (areaName) {
                    document.getElementById('drop').value = areaName;
                    document.getElementById('dropLat').value = lat;
                    document.getElementById('dropLng').value = lng;
                });

                var pickupLat = document.getElementById('pickupLat').value;
                var pickupLng = document.getElementById('pickupLng').value;
                if (pickupLat && pickupLng) {
                    var distance = calculateDistance(pickupLat, pickupLng, lat, lng);
                    if (distance <= 300) {
                        document.getElementById('distance').value = distance.toFixed(2);

                        if (route) map.removeControl(route);
                        route = L.Routing.control({
                            waypoints: [
                                L.latLng(pickupLat, pickupLng),
                                L.latLng(lat, lng)
                            ]
                        }).addTo(map);
                    } else {
                        displayMessage('Distance between locations exceeds 300 km!', 'danger');
                    }
                }
            }
            settingPickup = !settingPickup;
        });
    });

    // Swap the pickup and drop locations
    function swapLocations() {
        var pickupLocation = document.getElementById('pickup').value;
        var dropLocation = document.getElementById('drop').value;
        document.getElementById('pickup').value = dropLocation;
        document.getElementById('drop').value = pickupLocation;

        var pickupLat = document.getElementById('pickupLat').value;
        var pickupLng = document.getElementById('pickupLng').value;
        var dropLat = document.getElementById('dropLat').value;
        var dropLng = document.getElementById('dropLng').value;
        document.getElementById('pickupLat').value = dropLat;
        document.getElementById('pickupLng').value = dropLng;
        document.getElementById('dropLat').value = pickupLat;
        document.getElementById('dropLng').value = pickupLng;

        // Reset the route after swapping
        if (route) map.removeControl(route);
        if (pickupLat && pickupLng && dropLat && dropLng) {
            route = L.Routing.control({
                waypoints: [
                    L.latLng(pickupLat, pickupLng),
                    L.latLng(dropLat, dropLng)
                ]
            }).addTo(map);
        }
    }

    // Initialize map on page load
    resetMapToDefault();
</script>
