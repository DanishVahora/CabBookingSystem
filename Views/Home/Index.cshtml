@{
    Layout = "~/Views/Shared/_Layout.cshtml"; // Optional if you use a shared layout
}
<link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
<script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
<script src="https://unpkg.com/leaflet-routing-machine/dist/leaflet-routing-machine.js"></script>

<style>
    /* Shrink the routing instructions container */
    .leaflet-routing-container {
        font-size: 12px; /* Smaller font size */
        background-color: rgba(255, 255, 255, 0.8); /* Transparent background */
        width: 200px; /* Adjust width */
        padding: 5px;
        position: absolute;
        top: 10px; /* Place at the top */
        right: 10px; /* Place at the right */
        z-index: 1000;
        border-radius: 5px;
        box-shadow: 0 0 5px rgba(0, 0, 0, 0.5); /* Add subtle shadow */
    }

    /* Style for alternative routes (if any) */
    .leaflet-routing-alt {
        font-size: 10px;
        padding: 2px;
        border: 1px solid #ccc;
        border-radius: 3px;
    }

    /* Hide unnecessary elements inside the routing container */
    .leaflet-routing-container .leaflet-routing-instructions {
        display: none; /* Hide detailed instructions */
    }

    /* If you want to hide alternative routes (optional) */
    .leaflet-routing-container .leaflet-routing-alt {
        display: none;
    }
</style>


<br />
<br />
<!-- Header Section -->
<header class="bg-primary text-white text-center py-5 rounded-3">
    <div class="container">
        <h1>Welcome to the Cab Booking System</h1>
        <p>Book your cab with ease and comfort!</p>
    </div>
</header>

<!-- Booking Section with Map -->
<section id="booking-form" class="py-5">
    <div class="container">
        <h2 class="text-center mb-4">Book a Cab Now!</h2>

        <br /><br />

        <form action="/Home/Search" method="post">
            <div class="row">
                <div class="col-md-6">
                    <div class="form-group">
                        <label for="pickup">Pickup Location:</label>
                        <input type="text" id="pickup" name="PickupLocation" class="form-control" placeholder="Click on the map to select pickup location" required readonly />
                    </div>
                    <br />
                    <div class="form-group">
                        <label for="drop">Drop Location:</label>
                        <input type="text" id="drop" name="DropLocation" class="form-control" placeholder="Click on the map to select drop location" required readonly />
                    </div>
                    <br />
                    <!-- Swap Button -->
                    <div class="form-group">
                        <button type="button" class="btn btn-secondary" id="swap-btn" onclick="swapLocations()">Swap Locations</button>
                    </div>
                    <br />
                    <div class="form-group">
                        <label for="persons">Total Persons:</label>
                        <input type="number" id="persons" name="TotalPersons" class="form-control" placeholder="Enter the total number of persons" required />
                    </div>
                    <br />
                    <div class="form-group">
                        <label for="distance">Distance (km):</label>
                        <input type="number" id="distance" name="Distance" class="form-control" placeholder="Distance will be calculated" readonly />
                    </div>
                    <br />
                    <div class="form-group">
                        <label for="time">Booking Time:</label>
                        <input type="datetime-local" id="time" name="BookingTime" class="form-control" required />
                    </div>
                    <br />
                </div>
                <div class="col-md-6">
                    <center><label for="map">Select Locations on Map:</label></center>
                    <div id="map" style="height: 400px; border-left: 10px"></div>
                </div>
                <div style="display: flex; justify-content: center;">
                    <button type="submit" class="btn btn-primary">Search Cabs</button>
                </div>
            </div>
        </form>

       

    </div>
</section>

<!-- Features Section -->
<section id="features" class="py-5 bg-light">
    <div class="container">
        <h2 class="text-center">Why Choose Us?</h2>
        <br />
        <br />
        <br />
        <div class="row text-center">
            <div class="col-md-4">
                <h4>Reliable and Trusted Drivers</h4>
                <p>Our drivers are experienced and verified.</p>
            </div>
            <div class="col-md-4">
                <h4>Wide Range of Cabs</h4>
                <p>We provide a wide variety of cabs to suit your needs.</p>
            </div>
            <div class="col-md-4">
                <h4>Affordable Pricing</h4>
                <p>Get the best rates for all your rides.</p>
            </div>
        </div>
    </div>
</section>

<!-- Footer Section -->
<footer class="py-4 bg-dark text-white text-center">
    <div class="container">
        <p>&copy; 2024 Cab Booking System. All rights reserved.</p>
    </div>
</footer>

<script>
    function swapLocations() {
        var pickupInput = document.getElementById('pickup');
        var dropInput = document.getElementById('drop');

        // Swap the values
        var temp = pickupInput.value;
        pickupInput.value = dropInput.value;
        dropInput.value = temp;

        // Optional: Reset the route on the map based on new pickup/drop locations if both are set
        if (pickupMarker && dropMarker) {
            createRoute(pickupMarker.getLatLng(), dropMarker.getLatLng());
        }

    }
    // Initialize the map
    var map = L.map('map').setView([51.505, -0.09], 13); // Default view of the map

    // Set up map layer from OpenStreetMap
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: 'Map data © <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
    }).addTo(map);

    // Variables for pickup and drop markers and the route
    var pickupMarker, dropMarker, route;
    var settingPickup = false; // Start with setting drop location first

    // Function to remove a marker if it exists
    function removeMarker(marker) {
        if (marker) {
            map.removeLayer(marker);
        }
    }

    // Reverse Geocoding to get area name from coordinates
    function getAreaName(lat, lng, callback) {
        var url = `https://nominatim.openstreetmap.org/reverse?format=jsonv2&lat=${lat}&lon=${lng}`;
        fetch(url)
            .then(response => response.json())
            .then(data => {
                callback(data.display_name);
            })
            .catch(error => console.error('Error:', error));
    }

    // Function to create a route between two locations
    function createRoute(pickupLatLng, dropLatLng) {
        if (route) {
            map.removeControl(route); // Remove the old route if it exists
        }

        route = L.Routing.control({
            waypoints: [
                L.latLng(pickupLatLng.lat, pickupLatLng.lng),
                L.latLng(dropLatLng.lat, dropLatLng.lng)
            ],
            routeWhileDragging: true,
            show: false, // This hides the turn-by-turn instructions
            createMarker: function () { return null; }, // This removes markers if you don't want them either
            lineOptions: {
                styles: [{ color: 'blue', weight: 3 }] // Customizes the route line color and width
            }
        }).addTo(map);

        route.on('routesfound', function (e) {
            var routes = e.routes;
            var summary = routes[0].summary;

            // Calculate distance and set the value in the input field
            var distance = (summary.totalDistance / 1000).toFixed(2); // Convert meters to kilometers
            document.getElementById('distance').value = distance ;
            //+ ' km'
            // Log the calculated distance to console
            console.log("Calculated Distance: " + distance);
        });

    }

    // Map click event for selecting pickup and drop locations
    map.on('click', function (e) {
        if (!settingPickup) {
            // Set or update drop marker
            removeMarker(dropMarker); // Remove the existing drop marker if any
            dropMarker = L.marker(e.latlng).addTo(map);
            getAreaName(e.latlng.lat, e.latlng.lng, function (areaName) {
                document.getElementById('drop').value = areaName;
            });
            dropMarker.bindPopup('Drop location set here!').openPopup();
            settingPickup = true; // Switch to setting pickup location

            // Generate the route once both pickup and drop locations are set
            if (pickupMarker && dropMarker) {
                createRoute(pickupMarker.getLatLng(), dropMarker.getLatLng());
            }
        } else {
            // Set or update pickup marker
            removeMarker(pickupMarker); // Remove the existing pickup marker if any
            pickupMarker = L.marker(e.latlng).addTo(map);
            getAreaName(e.latlng.lat, e.latlng.lng, function (areaName) {
                document.getElementById('pickup').value = areaName;
            });
            pickupMarker.bindPopup('Pickup location set here!').openPopup();

            // Update the route if drop is already set
            if (dropMarker) {
                createRoute(pickupMarker.getLatLng(), dropMarker.getLatLng());
            }

            settingPickup = false; // Switch back to setting drop location on next click
        }
    });

    // Geolocation for current position as the default pickup
    if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(function (position) {
            var lat = position.coords.latitude;
            var lng = position.coords.longitude;

            map.setView([lat, lng], 13);

            // Add a marker for the current position
            pickupMarker = L.marker([lat, lng]).addTo(map)
                .bindPopup('Pickup location set here!')
                .openPopup();

            getAreaName(lat, lng, function (areaName) {
                document.getElementById('pickup').value = areaName;
            });
        });
    } else {
        alert('Geolocation is not supported by this browser.');
    }

y
</script>
