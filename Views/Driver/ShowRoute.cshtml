@{
    Layout = "~/Views/Shared/CabDriverLayout.cshtml"; // Use the new layout
}
@model CabBookingSystem.Models.ShowRouteViewModel

<div class="d-flex flex-column align-items-center mt-5">
    <h2 class="text-center mb-4">Route Details</h2>

    <div class="card mb-4 shadow-sm w-100" style="max-width: 600px;">
        <div class="card-header bg-primary text-white">
            <h5 class="mb-0">Booking Information</h5>
        </div>
        <div class="card-body">
            <p><strong>Pickup Location:</strong> @Model.PickupLocation</p>
            <p><strong>Drop Location:</strong> @Model.DropLocation</p>
            <p><strong>Booking Time:</strong> @Model.BookingTime.ToString("f")</p>
            <p><strong>Price:</strong> ₹@Model.Price</p>
        </div>
    </div>

    <div class="card w-100" style="max-width: 600px;">
        <div class="card-header bg-secondary text-white">
            <h5 class="mb-0">Route Map</h5>
        </div>
        <div class="card-body">
            <div id="map" class="rounded shadow-sm" style="height: 400px; width: 100%;"></div>
        </div>
    </div>
</div>

<link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
<script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
<link rel="stylesheet" href="https://unpkg.com/leaflet-routing-machine/dist/leaflet-routing-machine.css" />
<script src="https://unpkg.com/leaflet-routing-machine/dist/leaflet-routing-machine.js"></script>
<script>
    var map = L.map('map').setView([20.5937, 78.9629], 5); // Default view (India)

    // Add tile layer (OpenStreetMap)
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        maxZoom: 19,
    }).addTo(map);

    // Target location from the model
    var targetLocation = [@Model.PickupLatitude, @Model.PickupLongitude];

    // Geolocation function to update driver's current location
    function updateLocation() {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(function (position) {
                var lat = position.coords.latitude;
                var lng = position.coords.longitude;

                // Set map view to driver's location
                map.setView([lat, lng], 13);

                // Add marker for driver's location
                L.marker([lat, lng]).addTo(map)
                    .bindPopup("You are here!")
                    .openPopup();

                // Add marker for target location
                L.marker(targetLocation).addTo(map)
                    .bindPopup("Target Location")
                    .openPopup();

                // Add routing control
                L.Routing.control({
                    waypoints: [
                        L.latLng(lat, lng),   // Driver's location
                        L.latLng(targetLocation[0], targetLocation[1]) // Target location
                    ],
                    routeWhileDragging: true
                }).addTo(map);
            }, function (error) {
                console.error("Error retrieving location: ", error);
            });
        } else {
            alert("Geolocation is not supported by this browser.");
        }
    }

    // Call the function to update location
    updateLocation();
</script>
