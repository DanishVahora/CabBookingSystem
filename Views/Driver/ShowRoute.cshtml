@{
    Layout = "~/Views/Shared/CabDriverLayout.cshtml"; // Use the new layout
}
@model CabBookingSystem.Models.ShowRouteViewModel

@if (TempData["OtpError"] != null)
{
    <div class="alert alert-warning">
        @TempData["OtpError"]
    </div>
}

<div class="d-flex flex-column align-items-center mt-5">
    <h2 class="text-center mb-4">Route Details</h2>

    <!-- Booking Information Card -->
    <div class="card mb-4 shadow-sm w-100" style="max-width: 600px;">
        <div class="card-header bg-info text-white">
            <h5 class="mb-0"><i class="fas fa-map-marker-alt"></i> Booking Information</h5>
        </div>
        <div class="card-body">
            <p><i class="fas fa-location-arrow"></i> <strong>Pickup Location:</strong> @Model.PickupLocation</p>
            <p><i class="fas fa-map-marked-alt"></i> <strong>Drop Location:</strong> @Model.DropLocation</p>
            <p><i class="fas fa-clock"></i> <strong>Booking Time:</strong> @Model.BookingTime.ToString("f")</p>
            <p><i class="fas fa-money-bill"></i> <strong>Price:</strong> ₹@Model.Price</p>
        </div>
    </div>

    <!-- Route Map Card -->
    <div class="card w-100 mb-4 shadow-sm" style="max-width: 600px;">
        <div class="card-header bg-secondary text-white">
            <h5 class="mb-0"><i class="fas fa-map"></i> Route Map</h5>
        </div>
        <div class="card-body">
            <div id="map" class="rounded shadow-sm" style="height: 400px; width: 100%;"></div>
        </div>
    </div>

    <!-- OTP Verification Section -->
    <div class="card mb-4 shadow-sm w-100" style="max-width: 600px;">
        <div class="card-header bg-warning text-dark">
            <h5 class="mb-0"><i class="fas fa-key"></i> Verify OTP</h5>
        </div>
        <div class="card-body">
            <form method="post" action="/Driver/VerifyOtp">
                <div class="mb-3">
                    <label for="otpInput" class="form-label">Enter OTP to Confirm:</label>
                    <input type="number" class="form-control" id="otpInput" name="otp" placeholder="Enter 6-digit OTP" required />
                </div>
                <input type="hidden" name="bookingId" value="@ViewBag.bId" /> <!-- Hidden input for BookingId -->
                <button type="submit" class="btn btn-primary">Verify OTP</button>
            </form>
        </div>
    </div>

</div>

<!-- Leaflet and Leaflet Routing Machine -->
<!-- Leaflet and Leaflet Routing Machine -->
<link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
<script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
<link rel="stylesheet" href="https://unpkg.com/leaflet-routing-machine/dist/leaflet-routing-machine.css" />
<script src="https://unpkg.com/leaflet-routing-machine/dist/leaflet-routing-machine.js"></script>

<script>
    // Initialize the map with default location and zoom level
    var map = L.map('map', {
        center: [20.5937, 78.9629], // Default view over India
        zoom: 5,
        zoomControl: false // Hide default zoom controls
    });

    // Add tile layer (OpenStreetMap)
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        maxZoom: 19
    }).addTo(map);

    // Add custom zoom control buttons in the top right corner
    L.control.zoom({
        position: 'topright'
    }).addTo(map);

    // Target location (pickup location) from the model
    var targetLocation = [@Model.PickupLatitude, @Model.PickupLongitude];

    // Function to update driver's current location and route to pickup location
    function updateLocation() {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(function (position) {
                var lat = position.coords.latitude;
                var lng = position.coords.longitude;

                // Set map view to driver's location with appropriate zoom level
                map.setView([lat, lng], 13);

                // Add marker for driver's current location
                var driverMarker = L.marker([lat, lng]).addTo(map)
                    .bindPopup("You are here!")
                    .openPopup();

                // Add marker for target (pickup) location
                var pickupMarker = L.marker(targetLocation).addTo(map)
                    .bindPopup("Pickup Location")
                    .openPopup();

                // Add routing control from driver's location to pickup location
                L.Routing.control({
                    waypoints: [
                        L.latLng(lat, lng),        // Driver's current location
                        L.latLng(targetLocation[0], targetLocation[1]) // Pickup location
                    ],
                    routeWhileDragging: false,    // Disable route dragging
                    draggableWaypoints: false,    // Disable waypoint dragging
                    createMarker: function () { return null; } // Prevents extra route markers
                }).addTo(map);

            }, function (error) {
                console.error("Error retrieving location:", error);
                alert("Unable to retrieve your location. Please check your GPS settings.");
            });
        } else {
            alert("Geolocation is not supported by this browser.");
        }
    }

    // Call the function to update location on page load
    updateLocation();
</script>
>

